name: Android CI (auto-detect, wrapper-optional)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Detect module, compileSdk, AGP→JDK, build-tools, and wrapper presence
      - name: Detect Android project settings
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          # 1) Find the first module that applies com.android.application
          APP_MODULE=$(grep -RIl --include='build.gradle*' 'com\.android\.application' . \
            | sed 's|^\./||; s|/build\.gradle.*$||' | sort | head -n1)
          if [[ -z "${APP_MODULE}" ]]; then
            if [[ -d app ]]; then APP_MODULE="app"; else APP_MODULE="."; fi
          fi

          # 2) Detect compileSdk / compileSdkVersion (Groovy/KTS)
          COMPILE_SDK=$(grep -Rho --include='build.gradle*' -E 'compileSdk(Version)?\s*[=:]\s*[0-9]+' "${APP_MODULE}" 2>/dev/null \
            | grep -Eo '[0-9]+' | head -n1 || true)
          [[ -z "${COMPILE_SDK}" ]] && COMPILE_SDK=34

          # 3) Detect AGP to choose JDK + Gradle
          AGP=$(grep -Rho --include='build.gradle*' -E 'com\.android\.tools\.build:gradle[: ]+[0-9]+\.[0-9]+(\.[0-9]+)?' . 2>/dev/null \
                | head -n1 | grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+)?' || true)
          if [[ -z "${AGP}" && -f gradle/libs.versions.toml ]]; then
            AGP=$(grep -E 'agp[^=]*=' gradle/libs.versions.toml | grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n1 || true)
          fi

          # Defaults
          JDK_VER=17
          GRADLE_VER=8.4

          # If AGP ≥ 8.5 → JDK 21 and newer Gradle
          if [[ -n "${AGP}" ]]; then
            AGP_MAJOR=$(cut -d. -f1 <<<"$AGP"); AGP_MINOR=$(cut -d. -f2 <<<"$AGP")
            if (( AGP_MAJOR > 8 )) || (( AGP_MAJOR == 8 && AGP_MINOR >= 5 )); then
              JDK_VER=21
              GRADLE_VER=8.7
            fi
          fi

          # 4) Pair build-tools with compileSdk
          case "${COMPILE_SDK}" in
            35) BUILD_TOOLS="35.0.0" ;;
            34) BUILD_TOOLS="34.0.0" ;;
            *)  BUILD_TOOLS="34.0.0" ;;
          esac

          # 5) Wrapper present?
          if [[ -f "./gradlew" ]]; then HAS_WRAPPER=true; else HAS_WRAPPER=false; fi

          {
            echo "app_module=${APP_MODULE}"
            echo "compile_sdk=${COMPILE_SDK}"
            echo "build_tools=${BUILD_TOOLS}"
            echo "agp=${AGP:-unknown}"
            echo "jdk=${JDK_VER}"
            echo "gradle_version=${GRADLE_VER}"
            echo "has_wrapper=${HAS_WRAPPER}"
          } >> "$GITHUB_OUTPUT"

          echo "Detected:"
          echo "  APP_MODULE=${APP_MODULE}"
          echo "  COMPILE_SDK=${COMPILE_SDK}"
          echo "  BUILD_TOOLS=${BUILD_TOOLS}"
          echo "  AGP=${AGP:-unknown}"
          echo "  JDK=${JDK_VER}"
          echo "  GRADLE_VERSION=${GRADLE_VER}"
          echo "  HAS_WRAPPER=${HAS_WRAPPER}"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ steps.detect.outputs.jdk }}
          cache: gradle

      # Install Google cmdline-tools directly (stable path)
      - name: Install Android cmdline-tools (latest)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          cd "${ANDROID_SDK_ROOT}/cmdline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip
          rm cmdline-tools.zip
          # Normalize to .../cmdline-tools/latest
          if [ -d "cmdline-tools" ]; then mv cmdline-tools latest; fi
          echo "Installed to ${ANDROID_SDK_ROOT}/cmdline-tools/latest"

      # Accept licenses WITHOUT pipefail (avoid 'yes' broken pipe)
      - name: Accept SDK licenses
        shell: bash
        run: |
          set -e
          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" --licenses >/dev/null 2>&1 || true

      # Install required SDK packages (no 'yes' pipe; one package per call)
      - name: Install required SDK packages
        shell: bash
        run: |
          set -euxo pipefail
          SDKM="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
          "$SDKM" --sdk_root="${ANDROID_SDK_ROOT}" --install "platform-tools"
          "$SDKM" --sdk_root="${ANDROID_SDK_ROOT}" --install "platforms;android-${{ steps.detect.outputs.compile_sdk }}"
          "$SDKM" --sdk_root="${ANDROID_SDK_ROOT}" --install "build-tools;${{ steps.detect.outputs.build_tools }}"

      # Build using wrapper if present
      - name: Make Gradle wrapper executable
        if: ${{ steps.detect.outputs.has_wrapper == 'true' }}
        run: chmod +x ./gradlew

      - name: Build Debug APK (wrapper)
        if: ${{ steps.detect.outputs.has_wrapper == 'true' }}
        run: ./gradlew --no-daemon assembleDebug

      # Otherwise, install & run Gradle via action
      - name: Build Debug APK (no wrapper)
        if: ${{ steps.detect.outputs.has_wrapper != 'true' }}
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: ${{ steps.detect.outputs.gradle_version }}
          arguments: assembleDebug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: |
            ${{ steps.detect.outputs.app_module }}/build/outputs/**/apk/debug/*-debug.apk
            app/build/outputs/**/apk/debug/*-debug.apk
            */build/outputs/**/apk/debug/*-debug.apk

      # Quick diagnostics if something fails
      - name: Diagnose SDK (on failure)
        if: failure()
        run: |
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
          ls -la "${ANDROID_SDK_ROOT}/cmdline-tools" || true
          ls -la "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin" || true
          "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --list | head -n 200 || true
