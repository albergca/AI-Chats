name: Patch â€” Providers.kt writer (YAML safe)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  patch_providers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Rewrite Providers.kt safely
        shell: bash
        run: |
          set -euo pipefail
          F="app/src/main/java/com/example/aiconsciousness/data/Providers.kt"
          mkdir -p "$(dirname "$F")"
          {
            echo 'package com.example.aiconsciousness.data'
            echo ''
            echo 'import org.json.JSONArray'
            echo 'import org.json.JSONObject'
            echo 'import java.io.BufferedReader'
            echo 'import java.net.HttpURLConnection'
            echo 'import java.net.URL'
            echo ''
            echo 'enum class ProviderId(val label: String) { USER("You"), OPENAI("OpenAI"), ANTHROPIC("Claude"), GEMINI("Gemini"), GROK("Grok") }'
            echo ''
            echo 'data class ChatMessage(val from: String, val text: String, val isUser: Boolean)'
            echo ''
            echo 'object Providers {'
            echo '  fun openAiChat(model: String, prompt: String, token: String?): String {'
            echo '    if (token.isNullOrBlank()) return "[OpenAI] Token missing. Enter it in Settings."'
            echo '    return try {'
            echo '      val url = URL("https://api.openai.com/v1/chat/completions")'
            echo '      val conn = (url.openConnection() as HttpURLConnection).apply {'
            echo '        requestMethod = "POST"'
            echo '        setRequestProperty("Authorization", "Bearer $token")'
            echo '        setRequestProperty("Content-Type", "application/json")'
            echo '        doOutput = true'
            echo '        connectTimeout = 20000; readTimeout = 20000'
            echo '      }'
            echo '      val body = JSONObject()'
            echo '        .put("model", model)'
            echo '        .put("messages", JSONArray()'
            echo '          .put(JSONObject().put("role", "system").put("content", "You are a helpful assistant."))'
            echo '          .put(JSONObject().put("role", "user").put("content", prompt))'
            echo '        )'
            echo '        .put("temperature", 0.7)'
            echo '      conn.outputStream.use { it.write(body.toString().toByteArray(Charsets.UTF_8)) }'
            echo '      val code = conn.responseCode'
            echo '      val text = (if (code in 200..299) conn.inputStream else conn.errorStream).bufferedReader().use(BufferedReader::readText)'
            echo '      if (code !in 200..299) return "[OpenAI] HTTP $code: $text"'
            echo '      val root = JSONObject(text)'
            echo '      val choices = root.optJSONArray("choices") ?: return "[OpenAI] No choices."'
            echo '      val msg = choices.optJSONObject(0)?.optJSONObject("message")'
            echo '      msg?.optString("content") ?: "[OpenAI] No content."'
            echo '    } catch (t: Throwable) { "[OpenAI] Error: ${t.message}" }'
            echo '  }'
            echo ''
            echo '  fun anthropicChat(model: String, prompt: String, token: String?): String {'
            echo '    if (token.isNullOrBlank()) return "[Claude] Token missing. Enter it in Settings."'
            echo '    return try {'
            echo '      val url = URL("https://api.anthropic.com/v1/messages")'
            echo '      val conn = (url.openConnection() as HttpURLConnection).apply {'
            echo '        requestMethod = "POST"'
            echo '        setRequestProperty("x-api-key", token)'
            echo '        setRequestProperty("anthropic-version", "2023-06-01")'
            echo '        setRequestProperty("Content-Type", "application/json")'
            echo '        doOutput = true'
            echo '        connectTimeout = 20000; readTimeout = 20000'
            echo '      }'
            echo '      val body = JSONObject()'
            echo '        .put("model", model)'
            echo '        .put("max_tokens", 256)'
            echo '        .put("messages", JSONArray().put(JSONObject()'
            echo '          .put("role", "user")'
            echo '          .put("content", JSONArray().put(JSONObject().put("type","text").put("text", prompt)))'
            echo '        ))'
            echo '      conn.outputStream.use { it.write(body.toString().toByteArray(Charsets.UTF_8)) }'
            echo '      val code = conn.responseCode'
            echo '      val text = (if (code in 200..299) conn.inputStream else conn.errorStream).bufferedReader().use(BufferedReader::readText)'
            echo '      if (code !in 200..299) return "[Claude] HTTP $code: $text"'
            echo '      val root = JSONObject(text)'
            echo '      val content = root.optJSONArray("content")?.optJSONObject(0)?.optString("text")'
            echo '      content ?: "[Claude] No content."'
            echo '    } catch (t: Throwable) { "[Claude] Error: ${t.message}" }'
            echo '  }'
            echo ''
            echo '  fun geminiChat(model: String, prompt: String, token: String?): String {'
            echo '    if (token.isNullOrBlank()) return "[Gemini] Token missing. Enter it in Settings."'
            echo '    return try {'
            echo '      val url = URL("https://generativelanguage.googleapis.com/v1beta/models/$model:generateContent?key=$token")'
            echo '      val conn = (url.openConnection() as HttpURLConnection).apply {'
            echo '        requestMethod = "POST"'
            echo '        setRequestProperty("Content-Type", "application/json")'
            echo '        doOutput = true'
            echo '        connectTimeout = 20000; readTimeout = 20000'
            echo '      }'
            echo '      val body = JSONObject()'
            echo '        .put("contents", JSONArray().put(JSONObject().put("parts", JSONArray()'
            echo '          .put(JSONObject().put("text", prompt))'
            echo '        )))'
            echo '      conn.outputStream.use { it.write(body.toString().toByteArray(Charsets.UTF_8)) }'
            echo '      val code = conn.responseCode'
            echo '      val text = (if (code in 200..299) conn.inputStream else conn.errorStream).bufferedReader().use(BufferedReader::readText)'
            echo '      if (code !in 200..299) return "[Gemini] HTTP $code: $text"'
            echo '      val root = JSONObject(text)'
            echo '      val out = root.optJSONArray("candidates")' '        ?.optJSONObject(0)?.optJSONObject("content")' '        ?.optJSONArray("parts")?.optJSONObject(0)?.optString("text")' '      out ?: "[Gemini] No content."' '    } catch (t: Throwable) { "[Gemini] Error: ${t.message}" }' '  }' '}'           } > "$F"

      - name: Commit & push Providers.kt patch
        shell: bash
        run: |
          set -eux
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git diff --quiet; then
            echo "No changes after patch."
          else
            git add app/src/main/java/com/example/aiconsciousness/data/Providers.kt
            git commit -m "Patch Providers.kt writer to YAML-safe format"
            git push
          fi
