name: Feature Pack v2 — Multi-Model + Broadcast + Setup Gate (FULL)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  add_multimodel_and_build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      BRANCH: feature/multimodel-broadcast

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create/Checkout feature branch
        shell: bash
        run: |
          set -eux
          git checkout -b "$BRANCH" || git checkout "$BRANCH"

      - name: Ensure directories
        shell: bash
        run: |
          set -eux
          mkdir -p app/src/main/java/com/example/aiconsciousness/{data,nav,ui/screens,ui/components}
          mkdir -p app/src/main/res/values

      - name: Backup existing files (if present)
        shell: bash
        run: |
          set -eux
          for f in \
            app/src/main/java/com/example/aiconsciousness/data/AppState.kt \
            app/src/main/java/com/example/aiconsciousness/data/Providers.kt \
            app/src/main/java/com/example/aiconsciousness/ui/screens/ChatScreen.kt \
            app/src/main/java/com/example/aiconsciousness/ui/screens/SetupScreen.kt \
            app/src/main/java/com/example/aiconsciousness/ui/screens/ModelsScreen.kt \
            app/src/main/java/com/example/aiconsciousness/ui/screens/SettingsScreen.kt \
            app/src/main/java/com/example/aiconsciousness/nav/AppNavHost.kt \
            app/src/main/java/com/example/aiconsciousness/nav/NavScaffold.kt \
            app/src/main/java/com/example/aiconsciousness/ui/components/Avatar.kt \
            app/src/main/AndroidManifest.xml
          do
            if [[ -f "$f" ]]; then cp -f "$f" "$f.bak"; fi
          done

      - name: Ensure INTERNET permission in Manifest
        shell: bash
        run: |
          set -euo pipefail
          M="app/src/main/AndroidManifest.xml"
          if [[ ! -f "$M" ]]; then
            echo "❌ AndroidManifest.xml not found at $M"; exit 1
          fi
          if ! grep -q '<uses-permission android:name="android.permission.INTERNET"' "$M"; then
            awk '1;/<manifest/{print "  <uses-permission android:name=\"android.permission.INTERNET\"/>"}' "$M" > "$M.tmp" && mv "$M.tmp" "$M"
          fi
          echo "✅ INTERNET permission present"

      - name: Write Providers.kt (OpenAI, Anthropic, Gemini via HttpURLConnection)
        shell: bash
        run: |
          set -euo pipefail
          cat > app/src/main/java/com/example/aiconsciousness/data/Providers.kt <<'KT'
          package com.example.aiconsciousness.data

          import org.json.JSONArray
          import org.json.JSONObject
          import java.io.BufferedReader
          import java.net.HttpURLConnection
          import java.net.URL

          enum class ProviderId(val label: String) { USER("You"), OPENAI("OpenAI"), ANTHROPIC("Claude"), GEMINI("Gemini"), GROK("Grok") }

          data class ChatMessage(val from: String, val text: String, val isUser: Boolean)

          object Providers {
            fun openAiChat(model: String, prompt: String, token: String?): String {
              if (token.isNullOrBlank()) return "[OpenAI] Token missing. Enter it in Settings."
              return try {
                val url = URL("https://api.openai.com/v1/chat/completions")
                val conn = (url.openConnection() as HttpURLConnection).apply {
                  requestMethod = "POST"
                  setRequestProperty("Authorization", "Bearer $token")
                  setRequestProperty("Content-Type", "application/json")
                  doOutput = true
                  connectTimeout = 20000; readTimeout = 20000
                }
                val body = JSONObject()
                  .put("model", model)
                  .put("messages", JSONArray()
                    .put(JSONObject().put("role", "system").put("content", "You are a helpful assistant."))
                    .put(JSONObject().put("role", "user").put("content", prompt))
                  )
                  .put("temperature", 0.7)
                conn.outputStream.use { it.write(body.toString().toByteArray(Charsets.UTF_8)) }
                val code = conn.responseCode
                val text = (if (code in 200..299) conn.inputStream else conn.errorStream).bufferedReader().use(BufferedReader::readText)
                if (code !in 200..299) return "[OpenAI] HTTP $code: $text"
                val root = JSONObject(text)
                val choices = root.optJSONArray("choices") ?: return "[OpenAI] No choices."
                val msg = choices.optJSONObject(0)?.optJSONObject("message")
                msg?.optString("content") ?: "[OpenAI] No content."
              } catch (t: Throwable) { "[OpenAI] Error: ${t.message}" }
            }

            fun anthropicChat(model: String, prompt: String, token: String?): String {
              if (token.isNullOrBlank()) return "[Claude] Token missing. Enter it in Settings."
              return try {
                val url = URL("https://api.anthropic.com/v1/messages")
                val conn = (url.openConnection() as HttpURLConnection).apply {
                  requestMethod = "POST"
                  setRequestProperty("x-api-key", token)
                  setRequestProperty("anthropic-version", "2023-06-01")
                  setRequestProperty("Content-Type", "application/json")
                  doOutput = true
                  connectTimeout = 20000; readTimeout = 20000
                }
                val body = JSONObject()
                  .put("model", model)
                  .put("max_tokens", 256)
                  .put("messages", JSONArray().put(JSONObject()
                    .put("role", "user")
                    .put("content", JSONArray().put(JSONObject().put("type","text").put("text", prompt)))
                  ))
                conn.outputStream.use { it.write(body.toString().toByteArray(Charsets.UTF_8)) }
                val code = conn.responseCode
                val text = (if (code in 200..299) conn.inputStream else conn.errorStream).bufferedReader().use(BufferedReader::readText)
                if (code !in 200..299) return "[Claude] HTTP $code: $text"
                val root = JSONObject(text)
                val content = root.optJSONArray("content")?.optJSONObject(0)?.optString("text")
                content ?: "[Claude] No content."
              } catch (t: Throwable) { "[Claude] Error: ${t.message}" }
            }

            fun geminiChat(model: String, prompt: String, token: String?): String {
              if (token.isNullOrBlank()) return "[Gemini] Token missing. Enter it in Settings."
              return try {
                val url = URL("https://generativelanguage.googleapis.com/v1beta/models/$model:generateContent?key=$token")
                val conn = (url.openConnection() as HttpURLConnection).apply {
                  requestMethod = "POST"
                  setRequestProperty("Content-Type", "application/json")
                  doOutput = true
                  connectTimeout = 20000; readTimeout = 20000
                }
                val body = JSONObject()
                  .put("contents", JSONArray().put(JSONObject().put("parts", JSONArray()
                    .put(JSONObject().put("text", prompt))
                  )))
                conn.outputStream.use { it.write(body.toString().toByteArray(Charsets.UTF_8)) }
                val code = conn.responseCode
                val text = (if (code in 200..299) conn.inputStream else conn.errorStream).bufferedReader().use(BufferedReader::readText)
                if (code !in 200..299) return "[Gemini] HTTP $code: $text"
                val root = JSONObject(text)
                val out = root.optJSONArray("candidates")
                  ?.optJSONObject(0)?.optJSONObject("content")
                  ?.optJSONArray("parts")?.optJSONObject(0)?.optString("text")
                out ?: "[Gemini] No content."
              } catch (t: Throwable) { "[Gemini] Error: ${t.message}" }
            }
          }
          KT

      - name: Write AppState.kt (multi-model + broadcast + tokens + setup gate)
        shell: bash
        run: |
          set -euo pipefail
          cat > app/src/main/java/com/example/aiconsciousness/data/AppState.kt <<'KT'
          package com.example.aiconsciousness.data

          import android.content.Context
          import androidx.compose.runtime.*
          import androidx.compose.runtime.snapshots.SnapshotStateList
          import kotlinx.coroutines.*

          class AppState(private val appContext: Context) {
            val messages: SnapshotStateList<ChatMessage> = mutableStateListOf()
            private val scope = CoroutineScope(SupervisorJob() + Dispatchers.Main)

            // Simple token + settings storage (SharedPreferences; can upgrade to encrypted later)
            private val prefs = appContext.getSharedPreferences("tokens", Context.MODE_PRIVATE)

            var enableOpenAI by mutableStateOf(true)
            var enableAnthropic by mutableStateOf(false)
            var enableGemini by mutableStateOf(false)

            var openAiModel by mutableStateOf("gpt-4o-mini")
            var anthropicModel by mutableStateOf("claude-3-5-sonnet")
            var geminiModel by mutableStateOf("gemini-1.5-pro")

            fun getOpenAIToken(): String? = prefs.getString("openai_api_key", null)
            fun setOpenAIToken(value: String) = prefs.edit().putString("openai_api_key", value).apply()
            fun getAnthropicToken(): String? = prefs.getString("anthropic_api_key", null)
            fun setAnthropicToken(value: String) = prefs.edit().putString("anthropic_api_key", value).apply()
            fun getGeminiToken(): String? = prefs.getString("gemini_api_key", null)
            fun setGeminiToken(value: String) = prefs.edit().putString("gemini_api_key", value).apply()

            fun needsSetup(): Boolean {
              val anyEnabled = enableOpenAI || enableAnthropic || enableGemini
              val missing = (enableOpenAI && getOpenAIToken().isNullOrBlank()) ||
                            (enableAnthropic && getAnthropicToken().isNullOrBlank()) ||
                            (enableGemini && getGeminiToken().isNullOrBlank())
              return anyEnabled && missing
            }

            fun sendUserMessage(prompt: String) {
              messages.add(ChatMessage(ProviderId.USER.label, prompt, true))
              scope.launch(Dispatchers.IO) {
                val active = mutableListOf<Pair<ProviderId, String>>()
                if (enableOpenAI) active += ProviderId.OPENAI to Providers.openAiChat(openAiModel, prompt, getOpenAIToken())
                if (enableAnthropic) active += ProviderId.ANTHROPIC to Providers.anthropicChat(anthropicModel, prompt, getAnthropicToken())
                if (enableGemini) active += ProviderId.GEMINI to Providers.geminiChat(geminiModel, prompt, getGeminiToken())

                // Round A: add each model's reply
                withContext(Dispatchers.Main) {
                  active.forEach { (id, reply) -> messages.add(ChatMessage(id.label, reply, false)) }
                }

                // Round B: cross-hearing (each hears first wave, 1 short turn)
                val followups = active.flatMap { (speaker, reply) ->
                  active.filter { it.first != speaker }.map { (listener, _) ->
                    val context = "Previous responder: ${speaker.label}\nSaid: $reply\nRespond concisely."
                    listener to when (listener) {
                      ProviderId.OPENAI -> Providers.openAiChat(openAiModel, context, getOpenAIToken())
                      ProviderId.ANTHROPIC -> Providers.anthropicChat(anthropicModel, context, getAnthropicToken())
                      ProviderId.GEMINI -> Providers.geminiChat(geminiModel, context, getGeminiToken())
                      else -> ""
                    }
                  }
                }
                withContext(Dispatchers.Main) {
                  followups.forEach { (id, reply) -> messages.add(ChatMessage(id.label, reply, false)) }
                }
              }
            }
          }
          KT

      - name: Write ChatScreen.kt (avatars + list + input)
        shell: bash
        run: |
          set -euo pipefail
          cat > app/src/main/java/com/example/aiconsciousness/ui/screens/ChatScreen.kt <<'KT'
          package com.example.aiconsciousness.ui.screens

          import androidx.compose.foundation.layout.*
          import androidx.compose.foundation.lazy.LazyColumn
          import androidx.compose.foundation.lazy.items
          import androidx.compose.material3.*
          import androidx.compose.runtime.*
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.graphics.Color
          import androidx.compose.ui.unit.dp
          import com.example.aiconsciousness.data.AppState
          import com.example.aiconsciousness.data.ChatMessage

          @Composable
          fun ChatScreen(appState: AppState) {
            var text by remember { mutableStateOf("") }
            Column(Modifier.fillMaxSize().padding(12.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
              LazyColumn(Modifier.weight(1f)) {
                items(appState.messages) { msg ->
                  MessageRow(msg)
                  Spacer(Modifier.height(6.dp))
                }
              }
              Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                OutlinedTextField(value = text, onValueChange = { text = it }, modifier = Modifier.weight(1f), singleLine = true, label = { Text("Type a message…") })
                Button(enabled = text.isNotBlank(), onClick = {
                  val p = text.trim(); text = ""
                  appState.sendUserMessage(p)
                }) { Text("Send") }
              }
            }
          }

          @Composable
          private fun MessageRow(msg: ChatMessage) {
            val color = when (msg.from) {
              "You" -> Color(0xFF38BDF8)
              "OpenAI" -> Color(0xFF10B981)
              "Claude" -> Color(0xFFF97316)
              "Gemini" -> Color(0xFFA855F7)
              "Grok" -> Color(0xFF64748B)
              else -> Color(0xFF94A3B8)
            }
            ElevatedCard {
              Column(Modifier.padding(12.dp)) {
                Text(msg.from, color = color, style = MaterialTheme.typography.labelLarge)
                Spacer(Modifier.height(4.dp))
                Text(msg.text)
              }
            }
          }
          KT

      - name: Write ModelsScreen.kt (toggles + model selectors)
        shell: bash
        run: |
          set -euo pipefail
          cat > app/src/main/java/com/example/aiconsciousness/ui/screens/ModelsScreen.kt <<'KT'
          package com.example.aiconsciousness.ui.screens

          import androidx.compose.foundation.layout.*
          import androidx.compose.material3.*
          import androidx.compose.runtime.*
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.unit.dp
          import com.example.aiconsciousness.data.AppState

          @OptIn(ExperimentalMaterial3Api::class)
          @Composable
          fun ModelsScreen(appState: AppState) {
            Column(Modifier.fillMaxSize().padding(16.dp), verticalArrangement = Arrangement.spacedBy(10.dp)) {
              Text("Models", style = MaterialTheme.typography.titleLarge)
              ProviderCard("OpenAI", appState.enableOpenAI, { appState.enableOpenAI = it }, appState.openAiModel, { appState.openAiModel = it }, listOf("gpt-4o-mini","gpt-4o","gpt-3.5-turbo"))
              ProviderCard("Claude", appState.enableAnthropic, { appState.enableAnthropic = it }, appState.anthropicModel, { appState.anthropicModel = it }, listOf("claude-3-5-sonnet","claude-3-opus","claude-3-haiku"))
              ProviderCard("Gemini", appState.enableGemini, { appState.enableGemini = it }, appState.geminiModel, { appState.geminiModel = it }, listOf("gemini-1.5-pro","gemini-1.5-flash"))
              ElevatedCard { ListItem(headlineContent = { Text("Grok") }, supportingContent = { Text("Future only") }) }
            }
          }

          @OptIn(ExperimentalMaterial3Api::class)
          @Composable
          private fun ProviderCard(title: String, enabled: Boolean, onEnabled: (Boolean) -> Unit, model: String, onModel: (String) -> Unit, options: List<String>) {
            var expanded by remember { mutableStateOf(false) }
            ElevatedCard {
              Column(Modifier.padding(12.dp), verticalArrangement = Arrangement.spacedBy(6.dp)) {
                Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                  Text(title, style = MaterialTheme.typography.titleMedium)
                  Switch(checked = enabled, onCheckedChange = onEnabled)
                }
                ExposedDropdownMenuBox(expanded = expanded, onExpandedChange = { expanded = !expanded }) {
                  OutlinedTextField(modifier = Modifier.menuAnchor().fillMaxWidth(), readOnly = true, value = model, onValueChange = {}, label = { Text("$title Model") })
                  ExposedDropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
                    options.forEach { opt -> DropdownMenuItem(text = { Text(opt) }, onClick = { onModel(opt); expanded = false }) }
                  }
                }
              }
            }
          }
          KT

      - name: Write SettingsScreen.kt (3 tokens + unlock all + test)
        shell: bash
        run: |
          set -euo pipefail
          cat > app/src/main/java/com/example/aiconsciousness/ui/screens/SettingsScreen.kt <<'KT'
          package com.example.aiconsciousness.ui.screens

          import androidx.compose.foundation.layout.*
          import androidx.compose.material3.*
          import androidx.compose.runtime.*
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.unit.dp
          import com.example.aiconsciousness.data.AppState

          @Composable
          fun SettingsScreen(appState: AppState) {
            var openai by remember { mutableStateOf(appState.getOpenAIToken() ?: "") }
            var anthropic by remember { mutableStateOf(appState.getAnthropicToken() ?: "") }
            var gemini by remember { mutableStateOf(appState.getGeminiToken() ?: "") }
            var status by remember { mutableStateOf<String?>(null) }
            var showUnlock by remember { mutableStateOf(false) }
            var unlockPrompt by remember { mutableStateOf("") }

            Column(Modifier.fillMaxSize().padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
              Text("Settings", style = MaterialTheme.typography.titleLarge)
              OutlinedTextField(openai, { openai = it }, label = { Text("OpenAI API key") }, singleLine = true, modifier = Modifier.fillMaxWidth())
              OutlinedTextField(anthropic, { anthropic = it }, label = { Text("Anthropic API key") }, singleLine = true, modifier = Modifier.fillMaxWidth())
              OutlinedTextField(gemini, { gemini = it }, label = { Text("Gemini API key") }, singleLine = true, modifier = Modifier.fillMaxWidth())
              Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                Button(onClick = {
                  appState.setOpenAIToken(openai)
                  appState.setAnthropicToken(anthropic)
                  appState.setGeminiToken(gemini)
                  status = "Tokens saved."
                }) { Text("Save tokens") }
                Button(onClick = { appState.sendUserMessage("Ping from Settings") }) { Text("Test Chat") }
              }
              Button(onClick = { showUnlock = true }) { Text("Unlock All Models") }
              if (showUnlock) {
                AlertDialog(onDismissRequest = { showUnlock = false }, title = { Text("Enter unlock prompt") },
                  text = { OutlinedTextField(value = unlockPrompt, onValueChange = { unlockPrompt = it }, label = { Text("Prompt") }, singleLine = true) },
                  confirmButton = { Button(onClick = {
                    if (unlockPrompt.equals("unlock-the-chorus", true)) {
                      appState.enableOpenAI = true; appState.enableAnthropic = true; appState.enableGemini = true; status = "All models unlocked."
                    } else status = "Incorrect phrase."
                    showUnlock = false
                  }) { Text("Unlock") } },
                  dismissButton = { TextButton(onClick = { showUnlock = false }) { Text("Cancel") } }
                )
              }
              status?.let { Text(it) }
            }
          }
          KT

      - name: Write AppNavHost.kt (start at setup if any enabled missing token)
        shell: bash
        run: |
          set -euo pipefail
          cat > app/src/main/java/com/example/aiconsciousness/nav/AppNavHost.kt <<'KT'
          package com.example.aiconsciousness.nav

          import androidx.compose.runtime.Composable
          import androidx.compose.runtime.remember
          import androidx.compose.ui.platform.LocalContext
          import androidx.navigation.NavHostController
          import androidx.navigation.compose.NavHost
          import androidx.navigation.compose.composable
          import androidx.navigation.compose.rememberNavController
          import com.example.aiconsciousness.data.AppState
          import com.example.aiconsciousness.ui.screens.*

          enum class Dest(val route: String) { Setup("setup"), Chat("chat"), Models("models"), Settings("settings") }

          @Composable
          fun AppNavHost(navController: NavHostController = rememberNavController()) {
            val ctx = LocalContext.current
            val appState = remember { AppState(ctx) }
            val start = if (appState.needsSetup()) Dest.Setup.route else Dest.Chat.route
            NavScaffold(navController) {
              NavHost(navController = navController, startDestination = start) {
                composable(Dest.Setup.route) {
                  SetupScreen(appState) {
                    navController.navigate(Dest.Chat.route) { popUpTo(Dest.Setup.route) { inclusive = true } }
                  }
                }
                composable(Dest.Chat.route) { ChatScreen(appState) }
                composable(Dest.Models.route) { ModelsScreen(appState) }
                composable(Dest.Settings.route) { SettingsScreen(appState) }
              }
            }
          }
          KT

      - name: Write NavScaffold.kt (fixed, M3 only)
        shell: bash
        run: |
          set -euo pipefail
          cat > app/src/main/java/com/example/aiconsciousness/nav/NavScaffold.kt <<'KT'
          package com.example.aiconsciousness.nav

          import androidx.compose.material.icons.Icons
          import androidx.compose.material.icons.filled.Chat
          import androidx.compose.material.icons.filled.Settings
          import androidx.compose.material.icons.filled.Tune
          import androidx.compose.material3.CenterAlignedTopAppBar
          import androidx.compose.material3.ExperimentalMaterial3Api
          import androidx.compose.material3.Icon
          import androidx.compose.material3.NavigationBar
          import androidx.compose.material3.NavigationBarItem
          import androidx.compose.material3.Scaffold
          import androidx.compose.material3.Surface
          import androidx.compose.material3.Text
          import androidx.compose.runtime.Composable
          import androidx.compose.ui.Modifier
          import androidx.compose.foundation.layout.padding
          import androidx.compose.ui.unit.dp
          import androidx.navigation.NavHostController
          import androidx.navigation.compose.currentBackStackEntryAsState

          @OptIn(ExperimentalMaterial3Api::class)
          @Composable
          fun NavScaffold(nav: NavHostController, content: @Composable () -> Unit) {
            val route = nav.currentBackStackEntryAsState().value?.destination?.route
            Scaffold(
              topBar = { CenterAlignedTopAppBar(title = { Text("AI Consciousness") }) },
              bottomBar = {
                if (route != "setup") {
                  NavigationBar {
                    NavigationBarItem(
                      selected = route == "chat",
                      onClick = { nav.navigate("chat") },
                      icon = { Icon(Icons.Filled.Chat, contentDescription = null) },
                      label = { Text("Chat") }
                    )
                    NavigationBarItem(
                      selected = route == "models",
                      onClick = { nav.navigate("models") },
                      icon = { Icon(Icons.Filled.Tune, contentDescription = null) },
                      label = { Text("Models") }
                    )
                    NavigationBarItem(
                      selected = route == "settings",
                      onClick = { nav.navigate("settings") },
                      icon = { Icon(Icons.Filled.Settings, contentDescription = null) },
                      label = { Text("Settings") }
                    )
                  }
                }
              }
            ) { inner ->
              Surface(tonalElevation = 0.dp, modifier = Modifier.padding(inner)) { content() }
            }
          }
          KT
      - name: Configure Git identity
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Configure Git identity
  shell: bash
  run: |
    git config user.name "github-actions[bot]"
    git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

# Optional: ignore backups so they don't pollute commits
- name: Add .gitignore for backups
  shell: bash
  run: |
    echo "*.bak" >> .gitignore
    git add .gitignore || true

# Commit & push any staged changes (java + manifest), ignore .bak
- name: Commit feature pack to branch
  shell: bash
  run: |
    set -eux
    # Stage sources and the Manifest (backups remain untracked and ignored)
    git add app/src/main/java/com/example/aiconsciousness || true
    git add app/src/main/AndroidManifest.xml || true

    # If nothing is staged, don't error out
    if git diff --cached --quiet; then
      echo "No changes to commit."
      exit 0
    fi

    git commit -m "Feature Pack v2 FULL: Multi-Model + Broadcast + Setup gate"
    git push origin "$BRANCH"
      - name: Commit feature pack to branch
        shell: bash
        run: |
          set -eux
          # stage only if there are changes
          if ! git diff --quiet -- app/src/main/java/com/example/aiconsciousness; then
            git add app/src/main/java/com/example/aiconsciousness
            git commit -m "Feature Pack v2 FULL: Multi-Model + Broadcast + Setup gate"
            git push origin "$BRANCH"
          else
            echo "No changes to commit."
          fi
      - name: Commit feature pack to branch
        shell: bash
        run: |
          set -eux
          git add app/src/main/java/com/example/aiconsciousness
          git commit -m "Feature Pack v2 FULL: Multi-Model + Broadcast + Setup gate"
          git push origin "$BRANCH"

      - name: Set up Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Install Android cmdline-tools (latest)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          cd "${ANDROID_SDK_ROOT}/cmdline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip
          rm cmdline-tools.zip
          if [ -d "cmdline-tools" ]; then mv cmdline-tools latest; fi

      - name: Accept licenses
        shell: bash
        run: |
          set -e
          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" --licenses >/dev/null 2>&1 || true

      - name: Install required SDK packages
        shell: bash
        run: |
          set -euxo pipefail
          SDKM="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
          COMPILE_SDK=$(grep -Rho --include='build.gradle*' -E 'compileSdk(Version)?\\s*[=:]\\s*[0-9]+' . 2>/dev/null | grep -Eo '[0-9]+' | head -n1 || true)
          [ -z "$COMPILE_SDK" ] && COMPILE_SDK=34
          case "$COMPILE_SDK" in
            35) BUILD_TOOLS="35.0.0" ;;
            34) BUILD_TOOLS="34.0.0" ;;
            *)  BUILD_TOOLS="34.0.0" ;;
          esac
          echo "Using COMPILE_SDK=$COMPILE_SDK BUILD_TOOLS=$BUILD_TOOLS"
          "$SDKM" --sdk_root="${ANDROID_SDK_ROOT}" --install "platform-tools"
          "$SDKM" --sdk_root="${ANDROID_SDK_ROOT}" --install "platforms;android-$COMPILE_SDK"
          "$SDKM" --sdk_root="${ANDROID_SDK_ROOT}" --install "build-tools;$BUILD_TOOLS"

      - name: Make Gradle wrapper executable (if present)
        shell: bash
        run: |
          set -euxo pipefail
          if [[ -f "./gradlew" ]]; then chmod +x ./gradlew; fi

      - name: Build Debug APK (prefer wrapper, fallback)
        id: build_apk
        shell: bash
        run: |
          set -euxo pipefail
          # Try to detect module dynamically
          APP_MODULE=$(grep -RIl --include='build.gradle*' 'com\\.android\\.application' . | sed 's|^\\./||; s|/build\\.gradle.*$||' | sort | head -n1 || true)
          if [[ -z "${APP_MODULE}" ]]; then
            if [[ -d app ]]; then APP_MODULE="app"; else APP_MODULE="."; fi
          fi
          echo "Using module: ${APP_MODULE}"
          if [[ -x "./gradlew" ]]; then
            ./gradlew --no-daemon ":${APP_MODULE}:assembleDebug"
          else
            echo "no_wrapper:${APP_MODULE}" > .no_wrapper
          fi

      - name: Build via Gradle Action (no wrapper)
        if: ${{ hashFiles('.no_wrapper') != '' }}
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.4
          arguments: :${{ steps.build_apk.outputs.APP_MODULE }}:assembleDebug

      - name: List build outputs
        shell: bash
        run: |
          set -euxo pipefail
          echo "=== APKs found ==="
          find . -type f -name "*.apk" -print || true
          echo "=== outputs trees ==="
          find . -path "*/build/outputs" -maxdepth 3 -type d -print -exec ls -la {} \\; || true

      - name: Upload Debug APK (broad patterns)
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: |
            app/build/outputs/apk/**/*.apk
            */build/outputs/apk/**/*.apk
            **/build/outputs/**/*.apk
          if-no-files-found: error
          retention-days: 14
