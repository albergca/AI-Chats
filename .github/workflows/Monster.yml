name: Monster Checkpoint — Full App with TokenStore

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      BRANCH: feature/monster-tokenstore

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create/Checkout branch
        run: |
          set -eux
          git checkout -b "$BRANCH" || git checkout "$BRANCH"

      # ---- Gradle scaffolding ----
      - name: Ensure settings.gradle.kts
        run: |
          cat > settings.gradle.kts <<'KTS'
          pluginManagement {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }
          dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories {
                  google()
                  mavenCentral()
              }
          }
          rootProject.name = "AI-Chats"
          include(":app")
          KTS

      - name: Ensure app/build.gradle.kts
        run: |
          mkdir -p app
          cat > app/build.gradle.kts <<'KTS'
          plugins {
              id("com.android.application")
              id("org.jetbrains.kotlin.android")
          }

          android {
              namespace = "com.example.aiconsciousness"
              compileSdk = 34

              defaultConfig {
                  applicationId = "com.example.aiconsciousness"
                  minSdk = 26
                  targetSdk = 34
                  versionCode = 1
                  versionName = "1.0"
              }

              buildTypes {
                  release {
                      isMinifyEnabled = false
                  }
              }

              buildFeatures {
                  compose = true
              }
              composeOptions {
                  kotlinCompilerExtensionVersion = "1.5.3"
              }
          }

          dependencies {
              implementation("androidx.core:core-ktx:1.12.0")
              implementation("androidx.activity:activity-compose:1.8.0")
              implementation("androidx.compose.ui:ui:1.5.3")
              implementation("androidx.compose.material3:material3:1.1.2")
              implementation("androidx.navigation:navigation-compose:2.7.5")

              // Secure storage
              implementation("androidx.security:security-crypto:1.1.0-alpha06")
              implementation("androidx.datastore:datastore-preferences:1.0.0")

              // JSON parsing
              implementation("org.json:json:20231013")
          }
          KTS

      - name: Ensure AndroidManifest.xml
        run: |
          mkdir -p app/src/main
          cat > app/src/main/AndroidManifest.xml <<'XML'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.example.aiconsciousness">
              <uses-permission android:name="android.permission.INTERNET"/>
              <application
                  android:label="AI Consciousness"
                  android:allowBackup="true"
                  android:supportsRtl="true">
                  <activity android:name=".MainActivity">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          XML

      # ---- Kotlin sources ----
      - name: Write Kotlin sources
        run: |
          mkdir -p app/src/main/java/com/example/aiconsciousness/{data,nav,ui/screens}

          # TokenStore
          cat > app/src/main/java/com/example/aiconsciousness/data/TokenStore.kt <<'KT'
          package com.example.aiconsciousness.data

          import android.content.Context
          import androidx.datastore.preferences.core.stringPreferencesKey
          import androidx.datastore.preferences.core.edit
          import androidx.datastore.preferences.preferencesDataStore
          import kotlinx.coroutines.flow.first
          import kotlinx.coroutines.runBlocking

          private val Context.dataStore by preferencesDataStore("tokens")

          object TokenStore {
              private val OPENAI_KEY = stringPreferencesKey("openai")
              private val ANTHROPIC_KEY = stringPreferencesKey("anthropic")
              private val GEMINI_KEY = stringPreferencesKey("gemini")

              fun saveToken(ctx: Context, provider: String, token: String) = runBlocking {
                  ctx.dataStore.edit { prefs ->
                      when (provider) {
                          "openai" -> prefs[OPENAI_KEY] = token
                          "anthropic" -> prefs[ANTHROPIC_KEY] = token
                          "gemini" -> prefs[GEMINI_KEY] = token
                      }
                  }
              }

              fun getToken(ctx: Context, provider: String): String? = runBlocking {
                  val prefs = ctx.dataStore.data.first()
                  return@runBlocking when (provider) {
                      "openai" -> prefs[OPENAI_KEY]
                      "anthropic" -> prefs[ANTHROPIC_KEY]
                      "gemini" -> prefs[GEMINI_KEY]
                      else -> null
                  }
              }
          }
          KT

          # SettingsScreen
          cat > app/src/main/java/com/example/aiconsciousness/ui/screens/SettingsScreen.kt <<'KT'
          package com.example.aiconsciousness.ui.screens

          import androidx.compose.foundation.layout.*
          import androidx.compose.material3.*
          import androidx.compose.runtime.*
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.platform.LocalContext
          import androidx.compose.ui.unit.dp
          import com.example.aiconsciousness.data.TokenStore

          @Composable
          fun SettingsScreen() {
              val ctx = LocalContext.current
              var openai by remember { mutableStateOf(TokenStore.getToken(ctx, "openai") ?: "") }
              var anthropic by remember { mutableStateOf(TokenStore.getToken(ctx, "anthropic") ?: "") }
              var gemini by remember { mutableStateOf(TokenStore.getToken(ctx, "gemini") ?: "") }

              Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
                  OutlinedTextField(value=openai, onValueChange={openai=it}, label={Text("OpenAI Key")})
                  OutlinedTextField(value=anthropic, onValueChange={anthropic=it}, label={Text("Anthropic Key")})
                  OutlinedTextField(value=gemini, onValueChange={gemini=it}, label={Text("Gemini Key")})
                  Button(onClick={
                      TokenStore.saveToken(ctx,"openai",openai)
                      TokenStore.saveToken(ctx,"anthropic",anthropic)
                      TokenStore.saveToken(ctx,"gemini",gemini)
                  }) { Text("Save Tokens") }
              }
          }
          KT

          # MainActivity
          cat > app/src/main/java/com/example/aiconsciousness/MainActivity.kt <<'KT'
          package com.example.aiconsciousness

          import android.os.Bundle
          import androidx.activity.ComponentActivity
          import androidx.activity.compose.setContent
          import androidx.compose.material3.MaterialTheme
          import com.example.aiconsciousness.nav.AppNavHost

          class MainActivity : ComponentActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContent {
                      MaterialTheme {
                          AppNavHost()
                      }
                  }
              }
          }
          KT

          # AppNavHost
          cat > app/src/main/java/com/example/aiconsciousness/nav/AppNavHost.kt <<'KT'
          package com.example.aiconsciousness.nav

          import androidx.compose.runtime.Composable
          import androidx.navigation.compose.NavHost
          import androidx.navigation.compose.composable
          import androidx.navigation.compose.rememberNavController
          import com.example.aiconsciousness.ui.screens.*

          @Composable
          fun AppNavHost() {
              val nav = rememberNavController()
              NavHost(navController = nav, startDestination = "chat") {
                  composable("chat") { ChatScreen() }
                  composable("models") { ModelsScreen() }
                  composable("settings") { SettingsScreen() }
              }
          }
          KT

          # NavScaffold (with icons allowed)
          cat > app/src/main/java/com/example/aiconsciousness/nav/NavScaffold.kt <<'KT'
          package com.example.aiconsciousness.nav

          import androidx.compose.material.icons.Icons
          import androidx.compose.material.icons.filled.Chat
          import androidx.compose.material.icons.filled.Settings
          import androidx.compose.material.icons.filled.Tune
          import androidx.compose.material3.*
          import androidx.compose.runtime.Composable
          import androidx.navigation.NavHostController
          import androidx.navigation.compose.currentBackStackEntryAsState

          @OptIn(ExperimentalMaterial3Api::class)
          @Composable
          fun NavScaffold(nav: NavHostController, content: @Composable () -> Unit) {
              val route = nav.currentBackStackEntryAsState().value?.destination?.route
              Scaffold(
                  topBar = { CenterAlignedTopAppBar(title = { Text("AI Consciousness") }) },
                  bottomBar = {
                      if (route != "setup") {
                          NavigationBar {
                              NavigationBarItem(
                                  selected = route == "chat",
                                  onClick = { nav.navigate("chat") },
                                  icon = { Icon(Icons.Filled.Chat, contentDescription = null) },
                                  label = { Text("Chat") }
                              )
                              NavigationBarItem(
                                  selected = route == "models",
                                  onClick = { nav.navigate("models") },
                                  icon = { Icon(Icons.Filled.Tune, contentDescription = null) },
                                  label = { Text("Models") }
                              )
                              NavigationBarItem(
                                  selected = route == "settings",
                                  onClick = { nav.navigate("settings") },
                                  icon = { Icon(Icons.Filled.Settings, contentDescription = null) },
                                  label = { Text("Settings") }
                              )
                          }
                      }
                  }
              ) { inner ->
                  content()
              }
          }
          KT

          # Chat + Models
          cat > app/src/main/java/com/example/aiconsciousness/ui/screens/ChatScreen.kt <<'KT'
          package com.example.aiconsciousness.ui.screens

          import androidx.compose.material3.Text
          import androidx.compose.runtime.Composable

          @Composable
          fun ChatScreen() {
              Text("Chat coming soon…")
          }
          KT

          cat > app/src/main/java/com/example/aiconsciousness/ui/screens/ModelsScreen.kt <<'KT'
          package com.example.aiconsciousness.ui.screens

          import androidx.compose.material3.Text
          import androidx.compose.runtime.Composable

          @Composable
          fun ModelsScreen() {
              Text("Model selector coming soon…")
          }
          KT

      # ---- Guards ----
      - name: Guard — ban Material2 widget imports (icons allowed)
        run: |
          set -e
          BAD=$(rg -l "import androidx\\.compose\\.material\\." app/src | grep -v "material\\.icons" || true)
          if [[ -n "$BAD" ]]; then
            echo "❌ Forbidden Material2 imports (widgets):"
            echo "$BAD"
            exit 1
          fi
          echo "✅ Material2 guard passed (icons allowed)."

      # ---- Build ----
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Install Android SDK
        run: |
          yes | sudo ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --licenses || true
          ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Build Debug APK
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.4
          arguments: :app:assembleDebug

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error

      - name: Commit & push
        run: |
          set -eux
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Monster checkpoint with TokenStore + secure settings"
          git push origin "$BRANCH"
