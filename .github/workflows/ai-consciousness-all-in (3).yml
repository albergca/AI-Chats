name: One-Shot — Scaffold, Guard, Build, Upload (Compose M3 all-in)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  all_in_one:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      BRANCH: feature/ai-consciousness-scaffold

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create/Checkout branch
        run: |
          set -eux
          git checkout -b "$BRANCH" || git checkout "$BRANCH"

      - name: Create directories
        run: |
          set -eux
          mkdir -p app/src/main/{java/com/example/aiconsciousness/{data,nav,ui/{screens,components}},res/{values,drawable,mipmap-anydpi-v26}}
          mkdir -p .github/workflows

      # Example of writing files — truncated here for brevity in this demo
      - name: Write Gradle & Manifest & Resources
        run: |
          echo '... writes settings.gradle.kts, build.gradle.kts, gradle.properties, etc ...'

      - name: Write Kotlin sources
        run: |
          echo '... writes MainActivity.kt, AppNavHost.kt, NavScaffold.kt, AppState.kt, Providers.kt, SetupScreen.kt, ChatScreen.kt, ModelsScreen.kt, SettingsScreen.kt, etc ...'

      # Guards
      - name: Install ripgrep (scanner)
        run: sudo apt-get update && sudo apt-get install -y ripgrep

      - name: Auto-fix common Material2 slips (allow icons)
        run: echo 'auto-fix applied'

      - name: Guard — ban Material2 widget imports (icons allowed)
        run: echo 'checked'

      - name: Guard — ban M2 ListItem params
        run: echo 'checked'

      - name: Guard — ban Material2 dependency coordinates
        run: echo 'checked'

      - name: Hotfix NavScaffold (opt-in + setup literal + padding import)
        shell: bash
        run: |
          set -euo pipefail
          OUT="app/src/main/java/com/example/aiconsciousness/nav/NavScaffold.kt"
          mkdir -p "$(dirname "$OUT")"
          cat > "$OUT" <<'KT'
          package com.example.aiconsciousness.nav

          import androidx.compose.material.icons.Icons
          import androidx.compose.material.icons.filled.Chat
          import androidx.compose.material.icons.filled.Settings
          import androidx.compose.material.icons.filled.Tune
          import androidx.compose.material3.CenterAlignedTopAppBar
          import androidx.compose.material3.ExperimentalMaterial3Api
          import androidx.compose.material3.Icon
          import androidx.compose.material3.NavigationBar
          import androidx.compose.material3.NavigationBarItem
          import androidx.compose.material3.Scaffold
          import androidx.compose.material3.Surface
          import androidx.compose.material3.Text
          import androidx.compose.runtime.Composable
          import androidx.compose.ui.Modifier
          import androidx.compose.foundation.layout.padding
          import androidx.compose.ui.unit.dp
          import androidx.navigation.NavHostController
          import androidx.navigation.compose.currentBackStackEntryAsState

          @OptIn(ExperimentalMaterial3Api::class)
          @Composable
          fun NavScaffold(nav: NavHostController, content: @Composable () -> Unit) {
            val route = nav.currentBackStackEntryAsState().value?.destination?.route
            Scaffold(
              topBar = { CenterAlignedTopAppBar(title = { Text("AI Consciousness") }) },
              bottomBar = {
                if (route != "setup") {
                  NavigationBar {
                    NavigationBarItem(
                      selected = route == "chat",
                      onClick = { nav.navigate("chat") },
                      icon = { Icon(Icons.Filled.Chat, contentDescription = null) },
                      label = { Text("Chat") }
                    )
                    NavigationBarItem(
                      selected = route == "models",
                      onClick = { nav.navigate("models") },
                      icon = { Icon(Icons.Filled.Tune, contentDescription = null) },
                      label = { Text("Models") }
                    )
                    NavigationBarItem(
                      selected = route == "settings",
                      onClick = { nav.navigate("settings") },
                      icon = { Icon(Icons.Filled.Settings, contentDescription = null) },
                      label = { Text("Settings") }
                    )
                  }
                }
              }
            ) { inner ->
              Surface(tonalElevation = 0.dp, modifier = Modifier.padding(inner)) { content() }
            }
          }
          KT

      # Android build toolchain
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Install Android cmdline-tools
        run: echo 'install sdk'

      - name: Accept SDK licenses
        run: echo 'accept licenses'

      - name: Install required SDK packages
        run: echo 'install sdk packages'

      - name: Build Debug APK
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.4
          arguments: :app:assembleDebug

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: app/build/outputs/apk/**/*-debug.apk
          if-no-files-found: error
          retention-days: 30

      - name: Commit & push scaffold
        run: |
          set -eux
          git add .
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "Scaffold + guards + build (Compose M3)"
          git push origin "$BRANCH"
