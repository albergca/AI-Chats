name: Android CI — One Shot Build with Compose Guards (M3-only, icons allowed)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Detect module, compileSdk, AGP→JDK, build-tools, and wrapper presence (from your previous workflow)
      - name: Detect Android project settings
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          APP_MODULE=$(grep -RIl --include='build.gradle*' 'com\.android\.application' . \
            | sed 's|^\./||; s|/build\.gradle.*$||' | sort | head -n1)
          if [[ -z "${APP_MODULE}" ]]; then
            if [[ -d app ]]; then APP_MODULE="app"; else APP_MODULE="."; fi
          fi

          COMPILE_SDK=$(grep -Rho --include='build.gradle*' -E 'compileSdk(Version)?\s*[=:]\s*[0-9]+' "${APP_MODULE}" 2>/dev/null \
            | grep -Eo '[0-9]+' | head -n1 || true)
          [[ -z "${COMPILE_SDK}" ]] && COMPILE_SDK=34

          AGP=$(grep -Rho --include='build.gradle*' -E 'com\.android\.tools\.build:gradle[: ]+[0-9]+\.[0-9]+(\.[0-9]+)?' . 2>/dev/null \
                | head -n1 | grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+)?' || true)
          if [[ -z "${AGP}" && -f gradle/libs.versions.toml ]]; then
            AGP=$(grep -E 'agp[^=]*=' gradle/libs.versions.toml | grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n1 || true)
          fi

          JDK_VER=17
          GRADLE_VER=8.4
          if [[ -n "${AGP}" ]]; then
            AGP_MAJOR=$(cut -d. -f1 <<<"$AGP"); AGP_MINOR=$(cut -d. -f2 <<<"$AGP")
            if (( AGP_MAJOR > 8 )) || (( AGP_MAJOR == 8 && AGP_MINOR >= 5 )); then
              JDK_VER=21
              GRADLE_VER=8.7
            fi
          fi

          case "${COMPILE_SDK}" in
            35) BUILD_TOOLS="35.0.0" ;;
            34) BUILD_TOOLS="34.0.0" ;;
            *)  BUILD_TOOLS="34.0.0" ;;
          esac

          if [[ -f "./gradlew" ]]; then HAS_WRAPPER=true; else HAS_WRAPPER=false; fi

          {
            echo "app_module=${APP_MODULE}"
            echo "compile_sdk=${COMPILE_SDK}"
            echo "build_tools=${BUILD_TOOLS}"
            echo "agp=${AGP:-unknown}"
            echo "jdk=${JDK_VER}"
            echo "gradle_version=${GRADLE_VER}"
            echo "has_wrapper=${HAS_WRAPPER}"
          } >> "$GITHUB_OUTPUT"

          echo "Detected:"
          echo "  APP_MODULE=${APP_MODULE}"
          echo "  COMPILE_SDK=${COMPILE_SDK}"
          echo "  BUILD_TOOLS=${BUILD_TOOLS}"
          echo "  AGP=${AGP:-unknown}"
          echo "  JDK=${JDK_VER}"
          echo "  GRADLE_VERSION=${GRADLE_VER}"
          echo "  HAS_WRAPPER=${HAS_WRAPPER}"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ steps.detect.outputs.jdk }}
          cache: gradle

      - name: Install ripgrep (for code scanning)
        run: sudo apt-get update && sudo apt-get install -y ripgrep

      # Optional hotfix: rewrite NavScaffold to a safe M3-only version if the path exists
      - name: Hotfix NavScaffold to Material3-only (if present)
        shell: bash
        run: |
          set -euo pipefail
          FILE="${{ steps.detect.outputs.app_module }}/src/main/java/com/example/aiconsciousness/nav/NavScaffold.kt"
          if [[ -f "$FILE" ]]; then
            cat > "$FILE" <<'KT'
            package com.example.aiconsciousness.nav

            import androidx.compose.material.icons.Icons
            import androidx.compose.material.icons.filled.Chat
            import androidx.compose.material.icons.filled.Settings
            import androidx.compose.material.icons.filled.Tune
            import androidx.compose.material3.CenterAlignedTopAppBar
            import androidx.compose.material3.Icon
            import androidx.compose.material3.NavigationBar
            import androidx.compose.material3.NavigationBarItem
            import androidx.compose.material3.Scaffold
            import androidx.compose.material3.Surface
            import androidx.compose.material3.Text
            import androidx.compose.runtime.Composable
            import androidx.compose.ui.Modifier
            import androidx.compose.ui.unit.dp
            import androidx.navigation.NavHostController
            import androidx.navigation.compose.currentBackStackEntryAsState

            @Composable
            fun NavScaffold(nav: NavHostController, content: @Composable () -> Unit) {
              val route = nav.currentBackStackEntryAsState().value?.destination?.route
              Scaffold(
                topBar = { CenterAlignedTopAppBar(title = { Text("AI Consciousness") }) },
                bottomBar = {
                  if (route != "setup") {
                    NavigationBar {
                      NavigationBarItem(
                        selected = route == "chat",
                        onClick = { nav.navigate("chat") },
                        icon = { Icon(Icons.Filled.Chat, contentDescription = null) },
                        label = { Text("Chat") }
                      )
                      NavigationBarItem(
                        selected = route == "models",
                        onClick = { nav.navigate("models") },
                        icon = { Icon(Icons.Filled.Tune, contentDescription = null) },
                        label = { Text("Models") }
                      )
                      NavigationBarItem(
                        selected = route == "settings",
                        onClick = { nav.navigate("settings") },
                        icon = { Icon(Icons.Filled.Settings, contentDescription = null) },
                        label = { Text("Settings") }
                      )
                    }
                  }
                }
              ) { inner ->
                Surface(tonalElevation = 0.dp, modifier = Modifier.padding(inner)) { content() }
              }
            }
            KT
            echo "NavScaffold hotfixed."
          else
            echo "NavScaffold not present; skipping hotfix."
          fi

      # Auto-fix simple slips: remove Material2 widgets (allow icons), rewrite M2 ListItem params,
      # and ensure material3 + material-icons-extended dependencies exist.
      - name: Auto-fix Compose API usage & Gradle deps
        shell: bash
        run: |
          set -euo pipefail

          # Remove M2 widget imports (allow icons)
          rg -l '^import\s+androidx\.compose\.material\.(?!icons)' ${{ steps.detect.outputs.app_module }}/src || true | while read -r f; do
            echo "Auto-fixing Material2 imports in $f"
            sed -i '/^import\s\+androidx\.compose\.material\.\(icons\)\{0\}/d' "$f"
          done

          # Rewrite M2 ListItem param names to M3 slot API
          rg -l 'headlineText=|supportingText=|overlineText=' ${{ steps.detect.outputs.app_module }}/src || true | while read -r f; do
            echo "Rewriting ListItem params in $f"
            sed -i \
              -e 's/headlineText=/headlineContent=/g' \
              -e 's/supportingText=/supportingContent=/g' \
              -e 's/overlineText=/leadingContent=/g' \
              "$f"
          done

          # Ensure Gradle has material3 + icons dependency
          APP_GRADLE_GROOVY="${{ steps.detect.outputs.app_module }}/build.gradle"
          APP_GRADLE_KTS="${{ steps.detect.outputs.app_module }}/build.gradle.kts"
          FILE=""
          if [[ -f "$APP_GRADLE_KTS" ]]; then FILE="$APP_GRADLE_KTS"; elif [[ -f "$APP_GRADLE_GROOVY" ]]; then FILE="$APP_GRADLE_GROOVY"; fi
          if [[ -n "$FILE" ]]; then
            echo "Checking dependencies in $FILE"
            if ! rg -q 'androidx\.compose\.material3:material3' "$FILE"; then
              echo "Adding material3 dependency"
              sed -i '/dependencies\s*{.*/a \  implementation("androidx.compose.material3:material3")' "$FILE"
            fi
            if ! rg -q 'androidx\.compose\.material:material-icons-extended' "$FILE"; then
              echo "Adding material-icons-extended dependency"
              sed -i '/dependencies\s*{.*/a \  implementation("androidx.compose.material:material-icons-extended")' "$FILE"
            fi
          fi

      # Strict guards
      - name: Guard — ban Material 2 *widgets* (icons allowed)
        shell: bash
        run: |
          set -euo pipefail
          if rg -n '^import\s+androidx\.compose\.material\.(?!icons)' ${{ steps.detect.outputs.app_module }}/src | tee /dev/stderr; then
            echo "❌ Found Material 2 widget imports. Use androidx.compose.material3.* (icons are allowed)."
            exit 1
          fi
          echo "✅ No Material 2 widget imports detected."

      - name: Guard — ban M2 ListItem params
        shell: bash
        run: |
          set -euo pipefail
          if rg -n 'headlineText=|supportingText=|overlineText=' ${{ steps.detect.outputs.app_module }}/src | tee /dev/stderr; then
            echo "❌ Found Material 2 ListItem params. Use Material3 slots: headlineContent=, supportingContent=, leadingContent=/trailingContent=."
            exit 1
          fi
          echo "✅ ListItem parameters are Material3-style."

      - name: Guard — ban Material 2 dependency coordinates
        shell: bash
        run: |
          set -euo pipefail
          if rg -n 'androidx\.compose\.material\s*:' -- ${{ steps.detect.outputs.app_module }}/build.gradle* | tee /dev/stderr; then
            echo "❌ Gradle declares androidx.compose.material:* (Material 2). Remove it; rely on material3 + Compose BOM."
            exit 1
          fi
          echo "✅ No Material 2 dependencies in Gradle files."

      # Android toolchain
      - name: Install Android cmdline-tools (latest)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          cd "${ANDROID_SDK_ROOT}/cmdline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip
          rm cmdline-tools.zip
          if [ -d "cmdline-tools" ]; then mv cmdline-tools latest; fi

      - name: Accept SDK licenses
        shell: bash
        run: |
          set -e
          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" --licenses >/dev/null 2>&1 || true

      - name: Install required SDK packages
        shell: bash
        run: |
          set -euxo pipefail
          SDKM="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
          "$SDKM" --sdk_root="${ANDROID_SDK_ROOT}" --install "platform-tools"
          "$SDKM" --sdk_root="${ANDROID_SDK_ROOT}" --install "platforms;android-${{ steps.detect.outputs.compile_sdk }}"
          "$SDKM" --sdk_root="${ANDROID_SDK_ROOT}" --install "build-tools;${{ steps.detect.outputs.build_tools }}"

      - name: Make Gradle wrapper executable
        if: ${{ steps.detect.outputs.has_wrapper == 'true' }}
        run: chmod +x ./gradlew

      - name: Build Debug APK (wrapper)
        if: ${{ steps.detect.outputs.has_wrapper == 'true' }}
        run: ./gradlew --no-daemon assembleDebug

      - name: Build Debug APK (no wrapper)
        if: ${{ steps.detect.outputs.has_wrapper != 'true' }}
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: ${{ steps.detect.outputs.gradle_version }}
          arguments: assembleDebug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: |
            ${{ steps.detect.outputs.app_module }}/build/outputs/**/apk/debug/*-debug.apk
            app/build/outputs/**/apk/debug/*-debug.apk
            */build/outputs/**/apk/debug/*-debug.apk
          if-no-files-found: warn
          retention-days: 30
